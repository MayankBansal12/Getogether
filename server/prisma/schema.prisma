// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  about     String
  photographers Photographer[]
  eventParticipants EventParticipant[]
  vendors   Vendor[]
  // payments  Payment[] @relation("Payer")
  payments  Payment[] 
  // payments  Payment[] @relation("Payer") @relation("Payee")
  chatParticipants ChatParticipant[]
  channelParticipants ChannelParticipant[]
  groupMessages GroupMessage[]
}

model Budget {
  id       Int    @id @default(autoincrement())
  eventId  Int
  totalAmount Int
  spent    Int
  event    Event  @relation(fields: [eventId], references: [id])
}

model Photographer {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  user    User   @relation(fields: [userId], references: [id])
  photos  Photo[]
}

model Photo {
  id             Int    @id @default(autoincrement())
  photographerId Int
  eventId        Int
  private        Boolean
  photographer   Photographer @relation(fields: [photographerId], references: [id])
  event          Event        @relation(fields: [eventId], references: [id])
}

model Event {
  id        Int         @id @default(autoincrement())
  channels  Channel[]
  photos    Photo[]
  eventParticipants EventParticipant[]
  vendors   Vendor[]
  budgets   Budget[]
  chats     Chat[]
  groups    Group[]
}

model Channel {
  id        Int        @id @default(autoincrement())
  eventId   Int
  name      String
  venue     String
  startTime DateTime
  endTime   DateTime
  event     Event      @relation(fields: [eventId], references: [id])
  channelParticipants ChannelParticipant[]
  groupRelations GroupRelation[]
  channelServices ChannelService[]
}

model ChannelParticipant {
  id            Int     @id @default(autoincrement())
  participantId Int
  channelId     Int
  user          User    @relation(fields: [participantId], references: [id])
  channel       Channel @relation(fields: [channelId], references: [id])
  // chatParticipants ChatParticipant[]
}

model GroupRelation {
  id        Int     @id @default(autoincrement())
  groupId   Int
  channelId Int
  group     Group   @relation(fields: [groupId], references: [id])
  channel   Channel @relation(fields: [channelId], references: [id])
}

model Group {
  id        Int        @id @default(autoincrement())
  name      String
  desc      String
  eventId   Int
  event     Event      @relation(fields: [eventId], references: [id])
  groupRelations GroupRelation[]
  groupMessages GroupMessage[]
}

model GroupMessage {
  id        Int    @id @default(autoincrement())
  groupId   Int
  senderId  Int
  message   String
  photos    String
  group     Group  @relation(fields: [groupId], references: [id])
  sender    User   @relation(fields: [senderId], references: [id])
}

model ChannelService {
  id        Int     @id @default(autoincrement())
  channelId Int
  vendorId  Int
  channel   Channel @relation(fields: [channelId], references: [id])
  vendor    Vendor  @relation(fields: [vendorId], references: [id])
}

model EventParticipant {
  id        Int     @id @default(autoincrement())
  eventId   Int
  userId    Int @unique
  role      String
  status    Int
  user      User    @relation(fields: [userId], references: [id])
  event     Event   @relation(fields: [eventId], references: [id])
  chatParticipants ChatParticipant[]
}

model Vendor {
  id        Int     @id @default(autoincrement())
  userId    Int
  eventId   Int
  service   String
  user      User    @relation(fields: [userId], references: [id])
  event     Event   @relation(fields: [eventId], references: [id])
  channelServices ChannelService[]
}

model Payment {
  id        Int     @id @default(autoincrement())
  amount    Int
  date      Int
  payerId   Int
  payeeId   Int
  eventId   Int
  status    Int
  payer     User    @relation(fields: [payerId], references: [id], name: "Payer")
  payee     User    @relation(fields: [payeeId], references: [id], name: "Payee")
  event     Event   @relation(fields: [eventId], references: [id])
}

model Chat {
  id        Int        @id @default(autoincrement())
  eventId   Int
  senderId  Int
  receiverId Int
  message   String
  time      DateTime
  event     Event      @relation(fields: [eventId], references: [id])
  sender    EventParticipant @relation(name: "Sender",fields: [senderId], references: [userId])
  receiver  EventParticipant @relation(name: "Receiver",fields: [receiverId], references: [userId])
  chatParticipants ChatParticipant[]
}

model ChatParticipant {
  id            Int     @id @default(autoincrement())
  eventId       Int
  participantId Int
  chatId        Int
  event         Event  @relation(fields: [eventId], references: [id])
  participant   User   @relation(fields: [participantId], references: [id])
  chat          Chat   @relation(fields: [chatId], references: [id])
  // channelParticipant ChannelParticipant @relation(fields: [participantId, eventId], references: [participantId, eventId])
}